/*this file is auto generated by volk_register.py*/
#ifndef INCLUDED_VOLK_H
#define INCLUDED_VOLK_H

#include<inttypes.h>
#include<volk/volk_complex.h>
#include<volk/volk_config.h>
#include<volk/volk_config_fixed.h>
#include<volk/volk_environment_init.h>
#ifdef __cplusplus
extern "C" {
#endif

void volk_16i_x5_add_quad_16i_x4_a16(short* target0, short* target1, short* target2, short* target3, short* src0, short* src1, short* src2, short* src3, short* src4, unsigned int num_bytes);
void volk_16i_x5_add_quad_16i_x4_a16_manual(short* target0, short* target1, short* target2, short* target3, short* src0, short* src1, short* src2, short* src3, short* src4, unsigned int num_bytes, const char* arch);
 void volk_16i_branch_4_state_8_a16(short* target,  short* src0, char** permuters, short* cntl2, short* cntl3, short* scalars);
 void volk_16i_branch_4_state_8_a16_manual(short* target,  short* src0, char** permuters, short* cntl2, short* cntl3, short* scalars, const char* arch);
void volk_16ic_deinterleave_16i_x2_a16(int16_t* iBuffer, int16_t* qBuffer, const lv_16sc_t* complexVector, unsigned int num_points);
void volk_16ic_deinterleave_16i_x2_a16_manual(int16_t* iBuffer, int16_t* qBuffer, const lv_16sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_16ic_s32f_deinterleave_32f_x2_a16(float* iBuffer, float* qBuffer, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points);
void volk_16ic_s32f_deinterleave_32f_x2_a16_manual(float* iBuffer, float* qBuffer, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_16ic_deinterleave_real_16i_a16(int16_t* iBuffer, const lv_16sc_t* complexVector, unsigned int num_points);
void volk_16ic_deinterleave_real_16i_a16_manual(int16_t* iBuffer, const lv_16sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_16ic_s32f_deinterleave_real_32f_a16(float* iBuffer, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points);
void volk_16ic_s32f_deinterleave_real_32f_a16_manual(float* iBuffer, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_16ic_deinterleave_real_8i_a16(int8_t* iBuffer, const lv_16sc_t* complexVector, unsigned int num_points);
void volk_16ic_deinterleave_real_8i_a16_manual(int8_t* iBuffer, const lv_16sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_16ic_magnitude_16i_a16(int16_t* magnitudeVector, const lv_16sc_t* complexVector, unsigned int num_points);
void volk_16ic_magnitude_16i_a16_manual(int16_t* magnitudeVector, const lv_16sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_16ic_s32f_magnitude_32f_a16(float* magnitudeVector, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points);
void volk_16ic_s32f_magnitude_32f_a16_manual(float* magnitudeVector, const lv_16sc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_16i_s32f_convert_32f_a16(float* outputVector, const int16_t* inputVector, const float scalar, unsigned int num_points);
void volk_16i_s32f_convert_32f_a16_manual(float* outputVector, const int16_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_16i_s32f_convert_32f_u(float* outputVector, const int16_t* inputVector, const float scalar, unsigned int num_points);
void volk_16i_s32f_convert_32f_u_manual(float* outputVector, const int16_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_16i_convert_8i_a16(int8_t* outputVector, const int16_t* inputVector, unsigned int num_points);
void volk_16i_convert_8i_a16_manual(int8_t* outputVector, const int16_t* inputVector, unsigned int num_points, const char* arch);
void volk_16i_convert_8i_u(int8_t* outputVector, const int16_t* inputVector, unsigned int num_points);
void volk_16i_convert_8i_u_manual(int8_t* outputVector, const int16_t* inputVector, unsigned int num_points, const char* arch);
void volk_16i_max_star_16i_a16(short* target, short* src0, unsigned int num_bytes);
void volk_16i_max_star_16i_a16_manual(short* target, short* src0, unsigned int num_bytes, const char* arch);
void volk_16i_max_star_horizontal_16i_a16(int16_t* target, int16_t* src0, unsigned int num_bytes);
void volk_16i_max_star_horizontal_16i_a16_manual(int16_t* target, int16_t* src0, unsigned int num_bytes, const char* arch);
void volk_16i_permute_and_scalar_add_a16(short* target, short* src0, short* permute_indexes, short* cntl0, short* cntl1, short* cntl2, short* cntl3, short* scalars, unsigned int num_bytes);
void volk_16i_permute_and_scalar_add_a16_manual(short* target, short* src0, short* permute_indexes, short* cntl0, short* cntl1, short* cntl2, short* cntl3, short* scalars, unsigned int num_bytes, const char* arch);
void volk_16i_x4_quad_max_star_16i_a16(short* target, short* src0, short* src1, short* src2, short* src3, unsigned int num_bytes);
void volk_16i_x4_quad_max_star_16i_a16_manual(short* target, short* src0, short* src1, short* src2, short* src3, unsigned int num_bytes, const char* arch);
void volk_16u_byteswap_a16(uint16_t* intsToSwap, unsigned int num_points);
void volk_16u_byteswap_a16_manual(uint16_t* intsToSwap, unsigned int num_points, const char* arch);
void volk_32f_accumulator_s32f_a16(float* result, const float* inputBuffer, unsigned int num_points);
void volk_32f_accumulator_s32f_a16_manual(float* result, const float* inputBuffer, unsigned int num_points, const char* arch);
void volk_32f_x2_add_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_add_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32fc_32f_multiply_32fc_a16(lv_32fc_t* cVector, const lv_32fc_t* aVector, const float* bVector, unsigned int num_points);
void volk_32fc_32f_multiply_32fc_a16_manual(lv_32fc_t* cVector, const lv_32fc_t* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32fc_s32f_power_32fc_a16(lv_32fc_t* cVector, const lv_32fc_t* aVector, const float power, unsigned int num_points);
void volk_32fc_s32f_power_32fc_a16_manual(lv_32fc_t* cVector, const lv_32fc_t* aVector, const float power, unsigned int num_points, const char* arch);
void volk_32f_s32f_calc_spectral_noise_floor_32f_a16(float* noiseFloorAmplitude, const float* realDataPoints, const float spectralExclusionValue, const unsigned int num_points);
void volk_32f_s32f_calc_spectral_noise_floor_32f_a16_manual(float* noiseFloorAmplitude, const float* realDataPoints, const float spectralExclusionValue, const unsigned int num_points, const char* arch);
void volk_32fc_s32f_atan2_32f_a16(float* outputVector, const lv_32fc_t* inputVector, const float normalizeFactor, unsigned int num_points);
void volk_32fc_s32f_atan2_32f_a16_manual(float* outputVector, const lv_32fc_t* inputVector, const float normalizeFactor, unsigned int num_points, const char* arch);
void volk_32fc_x2_conjugate_dot_prod_32fc_a16(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes);
void volk_32fc_x2_conjugate_dot_prod_32fc_a16_manual(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes, const char* arch);
void volk_32fc_x2_conjugate_dot_prod_32fc_u(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes);
void volk_32fc_x2_conjugate_dot_prod_32fc_u_manual(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes, const char* arch);
void volk_32fc_deinterleave_32f_x2_a16(float* iBuffer, float* qBuffer, const lv_32fc_t* complexVector, unsigned int num_points);
void volk_32fc_deinterleave_32f_x2_a16_manual(float* iBuffer, float* qBuffer, const lv_32fc_t* complexVector, unsigned int num_points, const char* arch);
void volk_32fc_deinterleave_64f_x2_a16(double* iBuffer, double* qBuffer, const lv_32fc_t* complexVector, unsigned int num_points);
void volk_32fc_deinterleave_64f_x2_a16_manual(double* iBuffer, double* qBuffer, const lv_32fc_t* complexVector, unsigned int num_points, const char* arch);
void volk_32fc_s32f_deinterleave_real_16i_a16(int16_t* iBuffer, const lv_32fc_t* complexVector, const float scalar, unsigned int num_points);
void volk_32fc_s32f_deinterleave_real_16i_a16_manual(int16_t* iBuffer, const lv_32fc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32fc_deinterleave_real_32f_a16(float* iBuffer, const lv_32fc_t* complexVector, unsigned int num_points);
void volk_32fc_deinterleave_real_32f_a16_manual(float* iBuffer, const lv_32fc_t* complexVector, unsigned int num_points, const char* arch);
void volk_32fc_deinterleave_real_64f_a16(double* iBuffer, const lv_32fc_t* complexVector, unsigned int num_points);
void volk_32fc_deinterleave_real_64f_a16_manual(double* iBuffer, const lv_32fc_t* complexVector, unsigned int num_points, const char* arch);
void volk_32fc_x2_dot_prod_32fc_a16(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes);
void volk_32fc_x2_dot_prod_32fc_a16_manual(lv_32fc_t* result, const lv_32fc_t* input, const lv_32fc_t* taps, unsigned int num_bytes, const char* arch);
void volk_32fc_index_max_16u_a16(unsigned int* target, lv_32fc_t* src0, unsigned int num_bytes);
void volk_32fc_index_max_16u_a16_manual(unsigned int* target, lv_32fc_t* src0, unsigned int num_bytes, const char* arch);
void volk_32fc_s32f_magnitude_16i_a16(int16_t* magnitudeVector, const lv_32fc_t* complexVector, const float scalar, unsigned int num_points);
void volk_32fc_s32f_magnitude_16i_a16_manual(int16_t* magnitudeVector, const lv_32fc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32fc_magnitude_32f_a16(float* magnitudeVector, const lv_32fc_t* complexVector, unsigned int num_points);
void volk_32fc_magnitude_32f_a16_manual(float* magnitudeVector, const lv_32fc_t* complexVector, unsigned int num_points, const char* arch);
void volk_32fc_x2_multiply_32fc_a16(lv_32fc_t* cVector, const lv_32fc_t* aVector, const lv_32fc_t* bVector, unsigned int num_points);
void volk_32fc_x2_multiply_32fc_a16_manual(lv_32fc_t* cVector, const lv_32fc_t* aVector, const lv_32fc_t* bVector, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_16i_a16(int16_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_16i_a16_manual(int16_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_16i_u(int16_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_16i_u_manual(int16_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_32i_a16(int32_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_32i_a16_manual(int32_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_32i_u(int32_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_32i_u_manual(int32_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_convert_64f_a16(double* outputVector, const float* inputVector, unsigned int num_points);
void volk_32f_convert_64f_a16_manual(double* outputVector, const float* inputVector, unsigned int num_points, const char* arch);
void volk_32f_convert_64f_u(double* outputVector, const float* inputVector, unsigned int num_points);
void volk_32f_convert_64f_u_manual(double* outputVector, const float* inputVector, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_8i_a16(int8_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_8i_a16_manual(int8_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_s32f_convert_8i_u(int8_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points);
void volk_32f_s32f_convert_8i_u_manual(int8_t* outputVector, const float* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32fc_s32f_x2_power_spectral_density_32f_a16(float* logPowerOutput, const lv_32fc_t* complexFFTInput, const float normalizationFactor, const float rbw, unsigned int num_points);
void volk_32fc_s32f_x2_power_spectral_density_32f_a16_manual(float* logPowerOutput, const lv_32fc_t* complexFFTInput, const float normalizationFactor, const float rbw, unsigned int num_points, const char* arch);
void volk_32fc_s32f_power_spectrum_32f_a16(float* logPowerOutput, const lv_32fc_t* complexFFTInput, const float normalizationFactor, unsigned int num_points);
void volk_32fc_s32f_power_spectrum_32f_a16_manual(float* logPowerOutput, const lv_32fc_t* complexFFTInput, const float normalizationFactor, unsigned int num_points, const char* arch);
void volk_32fc_x2_square_dist_32f_a16(float* target, lv_32fc_t* src0, lv_32fc_t* points, unsigned int num_bytes);
void volk_32fc_x2_square_dist_32f_a16_manual(float* target, lv_32fc_t* src0, lv_32fc_t* points, unsigned int num_bytes, const char* arch);
void volk_32fc_x2_s32f_square_dist_scalar_mult_32f_a16(float* target, lv_32fc_t* src0, lv_32fc_t* points, float scalar, unsigned int num_bytes);
void volk_32fc_x2_s32f_square_dist_scalar_mult_32f_a16_manual(float* target, lv_32fc_t* src0, lv_32fc_t* points, float scalar, unsigned int num_bytes, const char* arch);
void volk_32f_x2_divide_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_divide_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32f_x2_dot_prod_32f_a16(float * result, const float * input, const float* taps, unsigned int num_points);
void volk_32f_x2_dot_prod_32f_a16_manual(float * result, const float * input, const float* taps, unsigned int num_points, const char* arch);
void volk_32f_x2_dot_prod_32f_u(float * result, const float * input, const float* taps, unsigned int num_points);
void volk_32f_x2_dot_prod_32f_u_manual(float * result, const float * input, const float* taps, unsigned int num_points, const char* arch);
void volk_32f_s32f_32f_fm_detect_32f_a16(float* outputVector, const float* inputVector, const float bound, float* saveValue, unsigned int num_points);
void volk_32f_s32f_32f_fm_detect_32f_a16_manual(float* outputVector, const float* inputVector, const float bound, float* saveValue, unsigned int num_points, const char* arch);
void volk_32f_index_max_16u_a16(unsigned int* target, const float* src0, unsigned int num_points);
void volk_32f_index_max_16u_a16_manual(unsigned int* target, const float* src0, unsigned int num_points, const char* arch);
void volk_32f_x2_s32f_interleave_16ic_a16(lv_16sc_t* complexVector, const float* iBuffer, const float* qBuffer, const float scalar, unsigned int num_points);
void volk_32f_x2_s32f_interleave_16ic_a16_manual(lv_16sc_t* complexVector, const float* iBuffer, const float* qBuffer, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_x2_interleave_32fc_a16(lv_32fc_t* complexVector, const float* iBuffer, const float* qBuffer, unsigned int num_points);
void volk_32f_x2_interleave_32fc_a16_manual(lv_32fc_t* complexVector, const float* iBuffer, const float* qBuffer, unsigned int num_points, const char* arch);
void volk_32f_x2_max_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_max_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32f_x2_min_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_min_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32f_x2_multiply_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_multiply_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32f_s32f_normalize_a16(float* vecBuffer, const float scalar, unsigned int num_points);
void volk_32f_s32f_normalize_a16_manual(float* vecBuffer, const float scalar, unsigned int num_points, const char* arch);
void volk_32f_s32f_power_32f_a16(float* cVector, const float* aVector, const float power, unsigned int num_points);
void volk_32f_s32f_power_32f_a16_manual(float* cVector, const float* aVector, const float power, unsigned int num_points, const char* arch);
void volk_32f_sqrt_32f_a16(float* cVector, const float* aVector, unsigned int num_points);
void volk_32f_sqrt_32f_a16_manual(float* cVector, const float* aVector, unsigned int num_points, const char* arch);
void volk_32f_s32f_stddev_32f_a16(float* stddev, const float* inputBuffer, const float mean, unsigned int num_points);
void volk_32f_s32f_stddev_32f_a16_manual(float* stddev, const float* inputBuffer, const float mean, unsigned int num_points, const char* arch);
void volk_32f_stddev_and_mean_32f_x2_a16(float* stddev, float* mean, const float* inputBuffer, unsigned int num_points);
void volk_32f_stddev_and_mean_32f_x2_a16_manual(float* stddev, float* mean, const float* inputBuffer, unsigned int num_points, const char* arch);
void volk_32f_x2_subtract_32f_a16(float* cVector, const float* aVector, const float* bVector, unsigned int num_points);
void volk_32f_x2_subtract_32f_a16_manual(float* cVector, const float* aVector, const float* bVector, unsigned int num_points, const char* arch);
void volk_32f_x3_sum_of_poly_32f_a16(float* target, float* src0, float* center_point_array, float* cutoff, unsigned int num_bytes);
void volk_32f_x3_sum_of_poly_32f_a16_manual(float* target, float* src0, float* center_point_array, float* cutoff, unsigned int num_bytes, const char* arch);
void volk_32i_x2_and_32i_a16(int32_t* cVector, const int32_t* aVector, const int32_t* bVector, unsigned int num_points);
void volk_32i_x2_and_32i_a16_manual(int32_t* cVector, const int32_t* aVector, const int32_t* bVector, unsigned int num_points, const char* arch);
void volk_32i_s32f_convert_32f_a16(float* outputVector, const int32_t* inputVector, const float scalar, unsigned int num_points);
void volk_32i_s32f_convert_32f_a16_manual(float* outputVector, const int32_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32i_s32f_convert_32f_u(float* outputVector, const int32_t* inputVector, const float scalar, unsigned int num_points);
void volk_32i_s32f_convert_32f_u_manual(float* outputVector, const int32_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_32i_x2_or_32i_a16(int32_t* cVector, const int32_t* aVector, const int32_t* bVector, unsigned int num_points);
void volk_32i_x2_or_32i_a16_manual(int32_t* cVector, const int32_t* aVector, const int32_t* bVector, unsigned int num_points, const char* arch);
void volk_32u_byteswap_a16(uint32_t* intsToSwap, unsigned int num_points);
void volk_32u_byteswap_a16_manual(uint32_t* intsToSwap, unsigned int num_points, const char* arch);
void volk_32u_popcnt_a16(uint32_t* ret, const uint32_t value);
void volk_32u_popcnt_a16_manual(uint32_t* ret, const uint32_t value, const char* arch);
void volk_64f_convert_32f_a16(float* outputVector, const double* inputVector, unsigned int num_points);
void volk_64f_convert_32f_a16_manual(float* outputVector, const double* inputVector, unsigned int num_points, const char* arch);
void volk_64f_convert_32f_u(float* outputVector, const double* inputVector, unsigned int num_points);
void volk_64f_convert_32f_u_manual(float* outputVector, const double* inputVector, unsigned int num_points, const char* arch);
void volk_64f_x2_max_64f_a16(double* cVector, const double* aVector, const double* bVector, unsigned int num_points);
void volk_64f_x2_max_64f_a16_manual(double* cVector, const double* aVector, const double* bVector, unsigned int num_points, const char* arch);
void volk_64f_x2_min_64f_a16(double* cVector, const double* aVector, const double* bVector, unsigned int num_points);
void volk_64f_x2_min_64f_a16_manual(double* cVector, const double* aVector, const double* bVector, unsigned int num_points, const char* arch);
void volk_64u_byteswap_a16(uint64_t* intsToSwap, unsigned int num_points);
void volk_64u_byteswap_a16_manual(uint64_t* intsToSwap, unsigned int num_points, const char* arch);
void volk_64u_popcnt_a16(uint64_t* ret, const uint64_t value);
void volk_64u_popcnt_a16_manual(uint64_t* ret, const uint64_t value, const char* arch);
void volk_8ic_deinterleave_16i_x2_a16(int16_t* iBuffer, int16_t* qBuffer, const lv_8sc_t* complexVector, unsigned int num_points);
void volk_8ic_deinterleave_16i_x2_a16_manual(int16_t* iBuffer, int16_t* qBuffer, const lv_8sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_8ic_s32f_deinterleave_32f_x2_a16(float* iBuffer, float* qBuffer, const lv_8sc_t* complexVector, const float scalar, unsigned int num_points);
void volk_8ic_s32f_deinterleave_32f_x2_a16_manual(float* iBuffer, float* qBuffer, const lv_8sc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_8ic_deinterleave_real_16i_a16(int16_t* iBuffer, const lv_8sc_t* complexVector, unsigned int num_points);
void volk_8ic_deinterleave_real_16i_a16_manual(int16_t* iBuffer, const lv_8sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_8ic_s32f_deinterleave_real_32f_a16(float* iBuffer, const lv_8sc_t* complexVector, const float scalar, unsigned int num_points);
void volk_8ic_s32f_deinterleave_real_32f_a16_manual(float* iBuffer, const lv_8sc_t* complexVector, const float scalar, unsigned int num_points, const char* arch);
void volk_8ic_deinterleave_real_8i_a16(int8_t* iBuffer, const lv_8sc_t* complexVector, unsigned int num_points);
void volk_8ic_deinterleave_real_8i_a16_manual(int8_t* iBuffer, const lv_8sc_t* complexVector, unsigned int num_points, const char* arch);
void volk_8ic_x2_multiply_conjugate_16ic_a16(lv_16sc_t* cVector, const lv_8sc_t* aVector, const lv_8sc_t* bVector, unsigned int num_points);
void volk_8ic_x2_multiply_conjugate_16ic_a16_manual(lv_16sc_t* cVector, const lv_8sc_t* aVector, const lv_8sc_t* bVector, unsigned int num_points, const char* arch);
void volk_8ic_x2_s32f_multiply_conjugate_32fc_a16(lv_32fc_t* cVector, const lv_8sc_t* aVector, const lv_8sc_t* bVector, const float scalar, unsigned int num_points);
void volk_8ic_x2_s32f_multiply_conjugate_32fc_a16_manual(lv_32fc_t* cVector, const lv_8sc_t* aVector, const lv_8sc_t* bVector, const float scalar, unsigned int num_points, const char* arch);
void volk_8i_convert_16i_a16(int16_t* outputVector, const int8_t* inputVector, unsigned int num_points);
void volk_8i_convert_16i_a16_manual(int16_t* outputVector, const int8_t* inputVector, unsigned int num_points, const char* arch);
void volk_8i_convert_16i_u(int16_t* outputVector, const int8_t* inputVector, unsigned int num_points);
void volk_8i_convert_16i_u_manual(int16_t* outputVector, const int8_t* inputVector, unsigned int num_points, const char* arch);
void volk_8i_s32f_convert_32f_a16(float* outputVector, const int8_t* inputVector, const float scalar, unsigned int num_points);
void volk_8i_s32f_convert_32f_a16_manual(float* outputVector, const int8_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
void volk_8i_s32f_convert_32f_u(float* outputVector, const int8_t* inputVector, const float scalar, unsigned int num_points);
void volk_8i_s32f_convert_32f_u_manual(float* outputVector, const int8_t* inputVector, const float scalar, unsigned int num_points, const char* arch);
#ifdef __cplusplus
}
#endif
#endif /*INCLUDED_VOLK_H*/
